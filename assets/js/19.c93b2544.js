(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{398:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_1.fa2f8e6e.png"},399:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_2.07c83441.png"},400:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_3.9168f8d7.png"},401:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_4.25b947a5.png"},402:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_5.128263e6.png"},403:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_6.5dc82582.png"},404:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_7.7d026c9e.png"},405:function(t,s,a){t.exports=a.p+"assets/img/JVM_2_8.cf07af7b.png"},426:function(t,s,a){"use strict";a.r(s);var r=a(14),_=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"jvm知识点全方位梳理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm知识点全方位梳理"}},[t._v("#")]),t._v(" JVM知识点全方位梳理")]),t._v(" "),s("p",[t._v("很多知识点，平时在开发中涉及比较少，很容易陷入“背了忘，忘了背，背了再忘，忘了再背”的状态。很大程度是因为没系统学习，没有形成深刻印象。")]),t._v(" "),s("p",[t._v("本文从7个维度梳理JVM相关知识点，分别是：内存结构、内存回收、 类加载机制、 class文件结、 对象、 内存相关、 JVM调优。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(398),alt:"图片"}})]),t._v(" "),s("h2",{attrs:{id:"一、内存结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、内存结构"}},[t._v("#")]),t._v(" 一、内存结构")]),t._v(" "),s("p",[t._v("值得特别说明一下的是方法区属于逻辑概念，在《Java虚拟机规范》中定义了方法区的概念与作用。HotSpot在JDK8之前用永久代来实现，之后引入了元空间。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(399),alt:"内存结构"}})]),t._v(" "),s("h2",{attrs:{id:"二、内存回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、内存回收"}},[t._v("#")]),t._v(" 二、内存回收")]),t._v(" "),s("p",[t._v("GC ROOT有哪些？")]),t._v(" "),s("p",[t._v("CMS存会产生空间碎片，浮动垃圾无法处理。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(400),alt:"内存回收"}})]),t._v(" "),s("h2",{attrs:{id:"三、类加载机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、类加载机制"}},[t._v("#")]),t._v(" 三、类加载机制")]),t._v(" "),s("p",[t._v("重点需要理解类生命周期每个环节所做的事情。")]),t._v(" "),s("p",[t._v("容易忽略的是如何破坏双亲委派机制。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(401),alt:"4.类加载机制"}})]),t._v(" "),s("h2",{attrs:{id:"四、class文件结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、class文件结构"}},[t._v("#")]),t._v(" 四、Class文件结构")]),t._v(" "),s("p",[s("img",{attrs:{src:a(402),alt:"5.class文件结构"}})]),t._v(" "),s("h2",{attrs:{id:"五、对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、对象"}},[t._v("#")]),t._v(" 五、对象")]),t._v(" "),s("p",[t._v("容易忽略点有栈上也可以分配内存给对象，但需要经过逃逸分析")]),t._v(" "),s("p",[s("img",{attrs:{src:a(403),alt:"6.对象"}})]),t._v(" "),s("h2",{attrs:{id:"六、内存相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、内存相关"}},[t._v("#")]),t._v(" 六、内存相关")]),t._v(" "),s("p",[t._v("内存溢出与内存泄漏的定义。")]),t._v(" "),s("p",[t._v("GC触发条件。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(404),alt:"7.内存相关"}})]),t._v(" "),s("h2",{attrs:{id:"七、jvm调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、jvm调优"}},[t._v("#")]),t._v(" 七、JVM调优")]),t._v(" "),s("p",[t._v("重点：GC健康指标。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(405),alt:"8.JVM调优"}})])])}),[],!1,null,null,null);s.default=_.exports}}]);